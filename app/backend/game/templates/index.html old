<!DOCTYPE html>
<html lang="en">
<head>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pok√©mon-Style Battle</title>
    <style>
        body {
            font-family: 'Press Start 2P', sans-serif;
            background-color: #E8E8E8;
            text-align: center;
            margin: 0;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* Game Container */
        .game-container {
            border: 2px solid black;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background-color: white;
            width: 450px;
            height: 600px;
            position: relative;
        }

        /* Battle Area */
        .battle-area {
            position: relative;
            width: 400px;
            height: 280px; /* Increased height for more space */
            border: 2px solid black;
            background-color: #e6ebe6;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 4px 4px 0 black, 8px 8px 0 white; /* Dual-border effect */
        }


        .player-container {
            position: absolute;
            bottom: 10px;
            left: 30px;
            text-align: center;
        }

        .monster-container {
            position: absolute;
            top: 10px;
            right: 30px;
            text-align: center;
        }

        .player-container img, .monster-container img {
            width: 120px;
            height: 120px;
            image-rendering: pixelated;
        }

        /* Retro Status Box */
        .status-box {
            width: 100%;
            background-color: white;
            padding: 5px;
            font-size: 12px;
            border: 2px solid black;
            box-shadow: 3px 3px 0 black;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        /* Health Bar */
        .hp-bar-container {
            width: 100px;
            height: 10px;
            background-color: lightgray;
            border: 1px solid black;
            margin-top: 5px;
            display: flex;
            align-items: center;
            /* REMOVE: justify-content: center; */
        }

        /* Smooth Health Bar Transition */
        .hp-bar {
            height: 10px;
            background-color: green;
            width: 100%;
            transition: width 0.5s ease;
            margin-left: 0; /* Ensure health bar aligns left */
        }
        
        /* Battle Log */
        .battle-log {
            position: absolute;
            top: 320px; /* Reduced to make room for battle area */
            width: 400px;
            height: 70px; /* Reduced height */
            padding: 10px;
            background-color: white;
            border: 3px solid black;
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
            box-shadow: 4px 4px 0 black, 8px 8px 0 white;
            font-size: 12px; /* Slightly bigger font */
            line-height: 1.2;
        }

        .menu-buttons,
        .attack-menu {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: absolute;
            bottom: 20px; /* Keeps it at the bottom */
            width: 100%;
        }

        /* Menu Buttons */
        .menu-buttons button,
        .attack-menu button {
            width: 200px;
            padding: 10px;
            margin: 5px;
            background-color: white;
            border: 2px solid black;
            cursor: pointer;
            position: relative;
            transition: all 0.2s;
            font-family: 'Press Start 2P', sans-serif;
            font-size: 12px; /* Slightly bigger font */
            box-shadow: 2px 2px 0 black;
        }

        /* Hover Effect */
        .menu-buttons button:hover,
        .attack-menu button:hover {
            background-color: #CCCCCC;
            color: black;
            transform: translate(-2px, -2px);
            box-shadow: 4px 4px 0 black;
        }

        /* Tooltip */
        .tooltip {
            position: fixed;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px;
            border-radius: 5px;
            font-size: 12px;
            display: none;
            max-width: 250px;
            text-align: left;
            z-index: 1000;
            pointer-events: none;
            white-space: pre-wrap;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
        }

        /* Buff and Debuff Styles */
        .buff {
            color: #00FF00;
            font-weight: bold;
        }

        .debuff {
            color: #FF3333;
            font-weight: bold;
        }

        /* Attack Animation */
        @keyframes attackMove {
            0% { transform: translateX(0); }
            50% { transform: translateX(-50px); }
            100% { transform: translateX(0); }
        }

        .attack-animation {
            animation: attackMove 0.5s ease-in-out;
        }

        /* Buff and Debuff Glow Effects */
        .buff-glow {
            filter: drop-shadow(0 0 15px #00FF00); /* Green glow for buffs */
            transition: filter 0.3s;
        }

        .debuff-glow {
            filter: drop-shadow(0 0 15px #FF3333); /* Red glow for debuffs */
            transition: filter 0.3s;
        }

        /* Screen Shake Effect */
        @keyframes shake {
            0%, 100% { transform: translate(0, 0); }
            25% { transform: translate(-5px, 5px); }
            50% { transform: translate(5px, -5px); }
            75% { transform: translate(-5px, -5px); }
        }

        .shake-effect {
            animation: shake 0.3s ease;
        }

        @keyframes hit-flash {
            0% { filter: brightness(1); }
            50% { filter: brightness(2) hue-rotate(-30deg); }
            100% { filter: brightness(1); }
        }

        .hit-flash {
            animation: hit-flash 0.3s ease-out;
        }


        @keyframes moveEffect {
            0% {
                left: 20%;
                top: 80%;
                opacity: 1;
                transform: scale(1);
            }
            50% {
                left: 60%;
                top: 20%;
                opacity: 0.8;
                transform: scale(1.2);
            }
            100% {
                left: 80%;
                top: 10%;
                opacity: 0;
                transform: scale(1);
            }
        }

        @keyframes moveEffectReverse {
            0% {
                left: 80%;
                top: 20%;
                opacity: 1;
                transform: scale(1);
            }
            50% {
                left: 60%;
                top: 20%;
                opacity: 0.8;
                transform: scale(1.2);
            }
            100% {
                left: 20%;
                top: 80%;
                opacity: 0;
                transform: scale(1);
            }
        }

        /* Make sure this class does not override the animation name */
        .moving-effect {
            position: absolute;
            width: 100px;
            height: 100px;
            z-index: 9999;
            pointer-events: none;
            animation-duration: 1s;
            animation-timing-function: ease-in-out;
        }

    </style>
</head>
<body>
    <div class="game-container">
        <div class="battle-area">
            <div class="monster-container" onmouseover="showTooltip(event, 'images/monster')" onmousemove="moveTooltip(event, 'monster')" onmouseout="hideTooltip('monster')">
                <img src="{{ url_for('static', filename='images/monster.png') }}" id="monster-img" alt="Monster">
                <div class="status-box">
                    Monster HP: <span id="monster-hp-text">100/100</span>
                    <div class="hp-bar-container">
                        <div class="hp-bar" id="monster-hp"></div>
                    </div>
                </div>
            </div>
            <div class="tooltip" id="monster-tooltip">Loading...</div>
            <div class="player-container" onmouseover="showTooltip(event, 'images/player')" onmousemove="moveTooltip(event, 'player')" onmouseout="hideTooltip('player')">
                <img src="{{ url_for('static', filename='images/player.png') }}" id="player-img" alt="Player">
                <div class="status-box">
                    Player HP: <span id="player-hp-text">100/100</span>
                    <div class="hp-bar-container">
                        <div class="hp-bar" id="player-hp"></div>
                    </div>
                </div>
            </div>
            <div class="tooltip" id="player-tooltip">Loading...</div>
        </div>

        <div class="battle-log" id="battle-log">Battle begins!</div>

        <div class="menu-buttons" id="main-menu">
            <button onclick="showAttackMenu()">Fight</button>
            <button onclick="useItem()">Items</button>
            <button onclick="runAway()">Run</button>
        </div>

        <div class="attack-menu" id="attack-menu">
            <button onclick="attack('Salad Slam')">ü•ó Salad Slam</button>
            <button onclick="attack('Cardio Crush')">üö¥ Cardio Crush</button>
            <button onclick="attack('Apple A Day')">üçé Apple A Day</button>
            <button onclick="attack('Back to Menu')">Back</button>
        </div>
    </div>

    <!-- Add these audio elements within the <body> tag -->
    <audio id="hit-sound" src="/static/sounds/hit.mp3" preload="auto"></audio>
    <audio id="win-sound" src="/static/sounds/win.mp3" preload="auto"></audio>
    <audio id="lose-sound" src="/static/sounds/lose.mp3" preload="auto"></audio>

    <script>
    function showAttackMenu() {
        document.getElementById("main-menu").style.display = "none";
        document.getElementById("attack-menu").style.display = "flex";
    }

    function attack(ability) {
        if (ability === "Back to Menu") {
            document.getElementById("attack-menu").style.display = "none";
            document.getElementById("main-menu").style.display = "flex";
            return;
        }

        document.getElementById("battle-log").innerText = `You used ${ability}!`;
        document.getElementById("main-menu").style.display = "none";
        document.getElementById("attack-menu").style.display = "none";

        // Add attack animation to player image
        document.getElementById("player-img").classList.add("attack-animation");
        setTimeout(() => {
            document.getElementById("player-img").classList.remove("attack-animation");
        }, 500);

        // Special Effect for specific attacks
        if (ability === "Cardio Crush") {
            showSpecialEffect('monster-container', 'moving-effect', 'heart');
        } else if (ability === "Salad Slam") {
            showSpecialEffect('monster-container', 'moving-effect', 'salad');
        } else if (ability === "Apple A Day") {
            showSpecialEffect('monster-container', 'moving-effect', 'apple');
        }


        setTimeout(() => {
            fetch('/attack', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ ability: ability })
            })
            .then(response => response.json())
            .then(data => {
                updateGameState(data);

                if (data.monster.hp <= 0) {
                    document.getElementById("battle-log").innerText = "You won! The monster is defeated.";
                    return;
                }

                setTimeout(() => {
                    document.getElementById("battle-log").innerText = "Monster is attacking...";

                    setTimeout(() => {
                        fetch('/enemy_turn', { method: 'POST' })
                            .then(response => response.json())
                            .then(data => {
                                updateGameState(data);

                                if (data.player.hp <= 0) {
                                    document.getElementById("battle-log").innerText = "You lost! The monster defeated you.";
                                    return;
                                }

                                // Extracts only the ability name from the full message
                                const fullMessage = data.message;
                                const abilityMatch = fullMessage.match(/Monster used (.*?) You lost/);

                                if (abilityMatch && abilityMatch[1]) {
                                    // Sanitize the ability name by removing trailing exclamation mark and whitespace
                                    const sanitizedAbility = abilityMatch[1].trim().replace(/!$/, '');
                                    console.log(`Sanitized ability name: ${sanitizedAbility}`);
                                    enemyAttack(sanitizedAbility, fullMessage);
                                } else {
                                    console.warn("Could not extract the monster ability name from the message.");
                                }

                                // Add screen shake effect when the player is hit
                                triggerScreenShake();
                                triggerHitFlash('player-img');

                                setTimeout(() => {
                                    document.getElementById("main-menu").style.display = "flex";
                                }, 1000);
                            });
                    }, 1000);
                }, 2000); // Reduced delay to avoid long waiting
            });
        }, 1000);
    }

    function enemyAttack(ability, fullMessage) {
        console.log(`Monster attack triggered: ${ability}`);
        document.getElementById("battle-log").innerText = fullMessage;

        if (ability === "Burger Barrage") {
            showSpecialEffect('player-container', 'moving-effect', 'burger', true);
        } else if (ability === "Couch Potato Curse") {
            showSpecialEffect('player-container', 'moving-effect', 'potato', true);
        } else if (ability === "Pizza Pummel") {
            showSpecialEffect('player-container', 'moving-effect', 'pizza', true);
        } else if (ability === "Soda Splash") {
            showSpecialEffect('player-container', 'moving-effect', 'soda', true);
        } else {
            console.warn(`No animation defined for ability: ${ability}`);
        }
    }

    function useItem() {
        document.getElementById("battle-log").innerText = "You have no items!";
    }

    function runAway() {
        document.getElementById("battle-log").innerText = "You can't run away from this battle!";
    }

    function updateGameState(data) {
        let playerHp = Math.max(data.player.hp, 0);
        let monsterHp = Math.max(data.monster.hp, 0);
        let playerMaxHp = data.player.max_hp || 100;
        let monsterMaxHp = data.monster.max_hp || 100;

        document.getElementById("player-hp").style.width = `${(playerHp / playerMaxHp) * 100}%`;
        document.getElementById("monster-hp").style.width = `${(monsterHp / monsterMaxHp) * 100}%`;

        document.getElementById("player-hp-text").innerText = `${playerHp}/${playerMaxHp}`;
        document.getElementById("monster-hp-text").innerText = `${monsterHp}/${monsterMaxHp}`;

        document.getElementById("battle-log").innerText = data.message;

        // Generate live commentary
        fetchCommentary(data.message);

        // Apply Buff/Debuff Glow
        if (data.message.includes("Buff")) {
            document.getElementById("player-img").classList.add("buff-glow");
            setTimeout(() => {
                document.getElementById("player-img").classList.remove("buff-glow");
            }, 1000);
        } else if (data.message.includes("Debuff")) {
            document.getElementById("player-img").classList.add("debuff-glow");
            setTimeout(() => {
                document.getElementById("player-img").classList.remove("debuff-glow");
            }, 1000);
        }

        // Play win sound when the player wins
        if (monsterHp <= 0) {
            document.getElementById("battle-log").innerText = "You won! The monster is defeated.";
            playWinSound();
            return;
        }

        // Play lose sound when the player loses
        if (playerHp <= 0) {
            document.getElementById("battle-log").innerText = "You lost! The monster defeated you.";
            playLoseSound();
            return;
        }

        // Trigger hit flash for monster when damaged
        if (data.message.includes("Monster lost")) {
            triggerHitFlash('monster-img');
        }

        // Trigger screen shake when player is hit
        if (data.message.includes("You lost")) {
            triggerScreenShake();
            playHitSound(); // Play hit sound when player is hit
        }
    }


    // Function to fetch updated status and show tooltip
    function showTooltip(event, character) {
        fetch('/get_status')
            .then(response => response.json())
            .then(data => {
                const tooltip = document.getElementById(character + "-tooltip");
                if (character === "player") {
                    tooltip.innerHTML = data.player_effect; // Get updated player stats
                } else if (character === "monster") {
                    tooltip.innerHTML = data.monster_effect; // Get updated monster stats
                }
                tooltip.style.display = "block";
                moveTooltip(event, character);
            })
            .catch(error => console.error("Error fetching status effects:", error));
    }

    function moveTooltip(event, character) {
        let tooltip = document.getElementById(character + "-tooltip");
        tooltip.style.left = `${event.clientX + 15}px`;
        tooltip.style.top = `${event.clientY + 10}px`;
    }

    function hideTooltip(character) {
        let tooltip = document.getElementById(character + "-tooltip");
        tooltip.style.display = "none";
    }

    function resetGame() {
        fetch('/reset', { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                updateGameState(data);  // Ensure the HP numbers reset correctly

                document.getElementById("player-hp").style.width = "100%";
                document.getElementById("monster-hp").style.width = "100%";

                document.getElementById("main-menu").style.display = "none";
                document.getElementById("attack-menu").style.display = "none";

                // ‚úÖ Show health & risk message immediately
                let initialMessage = data.message;
                console.log("Received Reset Message:", initialMessage);
                document.getElementById("battle-log").innerText = initialMessage + "\nBattle begins!";

                // ‚úÖ Show the buttons immediately
                document.getElementById("main-menu").style.display = "flex";
            })
            .catch(error => console.error("Error resetting game:", error));
    }

    function triggerHitFlash(target) {
        const element = document.getElementById(target);
        element.classList.add('hit-flash');
        playHitSound(); // Play sound when hit
        setTimeout(() => element.classList.remove('hit-flash'), 300);
    }

    function showSpecialEffect(target, effectClass, imageName, reverse = false) {
        console.log(`Triggering special effect: ${effectClass} on ${target} with image ${imageName}, reverse: ${reverse}`);
        
        const container = document.querySelector(".battle-area");
        if (!container) {
            console.error(`No element found with class: battle-area`);
            return;
        }

        // Create the animation effect as an image element
        const effect = document.createElement('img');
        effect.src = `/static/images/${imageName}.png`; // Use dynamic image name
        effect.className = effectClass;

        // Set the initial position and animation direction
        effect.style.position = 'absolute';
        effect.style.width = '100px';
        effect.style.height = '100px';
        effect.style.animationDuration = '1s';
        effect.style.animationTimingFunction = 'ease-in-out';
        effect.style.zIndex = '9999';

        if (reverse) {
            console.log("Applying reverse animation for effect");
            // Animation from monster to player
            effect.style.left = '80%'; // Start near the monster
            effect.style.top = '20%';  // Start at monster height
            effect.style.animationName = 'moveEffectReverse';
        } else {
            console.log("Applying normal animation for effect");
            // Animation from player to monster
            effect.style.left = '20%'; // Start near the player
            effect.style.top = '80%'; // Start at player height
            effect.style.animationName = 'moveEffect';
        }

        // Append the effect and schedule its removal
        container.appendChild(effect);

        setTimeout(() => {
            effect.remove();
            console.log('Special effect removed.');
        }, 1000);
    }

    function triggerScreenShake() {
        const container = document.querySelector(".game-container");
        container.classList.add("shake-effect");
        setTimeout(() => container.classList.remove("shake-effect"), 300);
    }

    // Function to play the hit sound
    function playHitSound() {
        const hitSound = document.getElementById('hit-sound');
        hitSound.currentTime = 0; // Rewind to the start
        hitSound.play();
    }

    // Function to play the win sound
    function playWinSound() {
        const winSound = document.getElementById('win-sound');
        winSound.currentTime = 0;
        winSound.play();
    }

    // Function to play the lose sound
    function playLoseSound() {
        const loseSound = document.getElementById('lose-sound');
        loseSound.currentTime = 0;
        loseSound.play();
    }

    function fetchCommentary(logMessage) {
        fetch('/generate_commentary', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ log: logMessage })
        })
        .then(response => response.json())
        .then(data => {
            // Only read out the commentary, do not display it on the battle log
            speakCommentary(data.commentary);
        })
        .catch(error => console.error("Error fetching commentary:", error));
    }


    // Function to speak out the commentary
    function speakCommentary(commentary) {
        const synth = window.speechSynthesis;
        const utterance = new SpeechSynthesisUtterance(commentary);
        utterance.lang = 'en-US';  
        utterance.rate = 2.0;  // Increase rate for faster speech (1.0 is normal, up to 2.0 for faster)
        utterance.pitch = 1.0;  // Optional: Keep the pitch normal
        synth.speak(utterance);
    }

    // Automatically reset game on page load or React component mount
    window.onload = () => resetGame();

    // Apply Buff/Debuff Glow
    console.log("Battle Log Message:", data.message);  // Debug log
    if (/Buff|Critical Hit|Workout Boost|Lucky Strike/.test(data.message)) {
        document.getElementById("player-img").classList.add("buff-glow");
        setTimeout(() => {
            document.getElementById("player-img").classList.remove("buff-glow");
        }, 1000);
    } else if (/Debuff|Sluggishness|Fatigue|Poisoning|Fumbled/.test(data.message)) {
        document.getElementById("player-img").classList.add("debuff-glow");
        setTimeout(() => {
            document.getElementById("player-img").classList.remove("debuff-glow");
        }, 1000);
    }

    </script>
</body>
</html>
